
// students\student-form\student-form.css
.custom-select {
  position: relative;
}

.animate-fade-in {
  animation: fadeIn 0.3s ease-in-out;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Custom scrollbar */
::-webkit-scrollbar {
  width: 6px;
}

::-webkit-scrollbar-track {
  background: #f1f5f9;
  border-radius: 3px;
}

::-webkit-scrollbar-thumb {
  background: #cbd5e1;
  border-radius: 3px;
}

::-webkit-scrollbar-thumb:hover {
  background: #94a3b8;
}

// students\student-form\student-form.html
<div class="min-h-screen bg-gradient-to-br from-blue-50 to-white py-8">
  <div class="max-w-2xl mx-auto p-6">
    <div
      class="bg-white rounded-lg shadow-md border border-slate-200 overflow-hidden"
    >
      <!-- Header -->
      <div class="bg-blue-600 px-6 py-4">
        <div class="flex items-center justify-between">
          <div>
            <h1 class="text-xl font-medium text-white">Add New Student</h1>
            <p class="text-blue-100 text-sm font-normal">
              Fill in the student information below
            </p>
          </div>
          <div
            class="bg-white/20 backdrop-blur-sm text-white px-3 py-1 rounded-full text-sm font-normal"
          >
            Student Form
          </div>
        </div>
      </div>

      <!-- Loading State -->
      <div *ngIf="isLoadingDropdowns" class="p-6 text-center">
        <div class="flex items-center justify-center space-x-2">
          <div
            class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"
          ></div>
          <span class="text-slate-600">Loading grade and section data...</span>
        </div>
      </div>

      <!-- Form Content -->
      <div class="p-6" *ngIf="!isLoadingDropdowns">
        <form [formGroup]="studentForm" (ngSubmit)="onSubmit()">
          <div class="space-y-6">
            <!-- Name Field -->
            <div class="space-y-2">
              <label class="block text-sm font-medium text-slate-700">
                Student Name <span class="text-red-500">*</span>
              </label>
              <input
                type="text"
                class="w-full px-4 py-3 border border-slate-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 bg-slate-50 hover:bg-white"
                formControlName="name"
                placeholder="Enter student's full name"
                [class.border-red-300]="
                  controlHasError('name', 'required') ||
                  controlHasError('name', 'minlength')
                "
                [class.bg-red-50]="
                  controlHasError('name', 'required') ||
                  controlHasError('name', 'minlength')
                "
              />
              <div
                *ngIf="controlHasError('name', 'required')"
                class="text-sm text-red-600 font-normal"
              >
                Please enter the student's name
              </div>
              <div
                *ngIf="controlHasError('name', 'minlength')"
                class="text-sm text-red-600 font-normal"
              >
                Name must be at least 2 characters long
              </div>
            </div>

            <!-- Age Field -->
            <div class="space-y-2">
              <label class="block text-sm font-medium text-slate-700">
                Age <span class="text-red-500">*</span>
              </label>
              <input
                type="number"
                min="5"
                max="20"
                class="w-full px-4 py-3 border border-slate-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 bg-slate-50 hover:bg-white"
                formControlName="age"
                placeholder="Enter student's age"
                [class.border-red-300]="
                  controlHasError('age', 'required') ||
                  controlHasError('age', 'min') ||
                  controlHasError('age', 'max')
                "
                [class.bg-red-50]="
                  controlHasError('age', 'required') ||
                  controlHasError('age', 'min') ||
                  controlHasError('age', 'max')
                "
              />
              <div
                *ngIf="controlHasError('age', 'required')"
                class="text-sm text-red-600 font-normal"
              >
                Please enter the student's age
              </div>
              <div
                *ngIf="controlHasError('age', 'min')"
                class="text-sm text-red-600 font-normal"
              >
                Age must be at least 5 years
              </div>
              <div
                *ngIf="controlHasError('age', 'max')"
                class="text-sm text-red-600 font-normal"
              >
                Age must not exceed 20 years
              </div>
            </div>

            <!-- Roll Number Field -->
            <div class="space-y-2">
              <label class="block text-sm font-medium text-slate-700">
                Roll Number <span class="text-red-500">*</span>
              </label>
              <input
                type="number"
                class="w-full px-4 py-3 border border-slate-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 bg-slate-50 hover:bg-white"
                formControlName="rollNo"
                placeholder="Enter roll number (e.g., 2024001)"
                [class.border-red-300]="
                  controlHasError('rollNo', 'required') ||
                  controlHasError('rollNo', 'pattern')
                "
                [class.bg-red-50]="
                  controlHasError('rollNo', 'required') ||
                  controlHasError('rollNo', 'pattern')
                "
              />
              <div
                *ngIf="controlHasError('rollNo', 'required')"
                class="text-sm text-red-600 font-normal"
              >
                Please enter the roll number
              </div>
              <div
                *ngIf="controlHasError('rollNo', 'pattern')"
                class="text-sm text-red-600 font-normal"
              >
                Roll number must contain only letters and numbers
              </div>
            </div>

            <!-- Class Dropdown -->
            <div class="space-y-2">
              <label class="block text-sm font-medium text-slate-700">
                Class <span class="text-red-500">*</span>
              </label>
              <div class="custom-select relative">
                <select
                  class="w-full px-4 py-3 border border-slate-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 bg-slate-50 hover:bg-white appearance-none cursor-pointer"
                  formControlName="class"
                  [class.border-red-300]="controlHasError('class', 'required')"
                  [class.bg-red-50]="controlHasError('class', 'required')"
                >
                  <option value="">Select a class</option>
                  <option
                    *ngFor="let classItem of gradeSections"
                    [value]="classItem._id"
                  >
                    Grade {{ classItem.grade }} - Section
                    {{ classItem.section }}
                  </option>
                </select>
                <div
                  class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none"
                >
                  <svg
                    class="w-5 h-5 text-slate-400"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M19 9l-7 7-7-7"
                    ></path>
                  </svg>
                </div>
              </div>
              <div
                *ngIf="controlHasError('class', 'required')"
                class="text-sm text-red-600 font-normal"
              >
                Please select a class
              </div>

              <!-- Show total classes available -->
              <div class="text-xs text-slate-500">
                {{ gradeSections.length }} class(es) available
              </div>
            </div>
            <!-- Date of Birth -->
            <div class="space-y-2">
              <label class="block text-sm font-medium text-slate-700">
                Date of Birth <span class="text-red-500">*</span>
              </label>
              <input
                type="date"
                class="w-full px-4 py-3 border rounded-lg shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                formControlName="dob"
                [class.border-red-300]="controlHasError('dob', 'required')"
              />
              <div
                *ngIf="controlHasError('dob', 'required')"
                class="text-sm text-red-600"
              >
                Please select date of birth
              </div>
            </div>

            <!-- Gender -->
            <div class="space-y-2">
              <label class="block text-sm font-medium text-slate-700">
                Gender <span class="text-red-500">*</span>
              </label>
              <select
                class="w-full px-4 py-3 border rounded-lg shadow-sm focus:ring-2 focus:ring-blue-500"
                formControlName="gender"
                [class.border-red-300]="controlHasError('gender', 'required')"
              >
                <option value="">Select gender</option>
                <option value="male">Male</option>
                <option value="female">Female</option>
                <option value="other">Other</option>
              </select>
              <div
                *ngIf="controlHasError('gender', 'required')"
                class="text-sm text-red-600"
              >
                Please select gender
              </div>
            </div>

            <!-- Address -->
            <div class="space-y-2">
              <label class="block text-sm font-medium text-slate-700">
                Address <span class="text-red-500">*</span>
              </label>
              <textarea
                rows="2"
                class="w-full px-4 py-3 border rounded-lg shadow-sm focus:ring-2 focus:ring-blue-500"
                formControlName="address"
                placeholder="Enter address"
                [class.border-red-300]="controlHasError('address', 'required')"
              ></textarea>
              <div
                *ngIf="controlHasError('address', 'required')"
                class="text-sm text-red-600"
              >
                Please enter address
              </div>
            </div>

            <!-- Admission Date -->
            <div class="space-y-2">
              <label class="block text-sm font-medium text-slate-700">
                Admission Date <span class="text-red-500">*</span>
              </label>
              <input
                type="date"
                class="w-full px-4 py-3 border rounded-lg shadow-sm focus:ring-2 focus:ring-blue-500"
                formControlName="admissionDate"
                [class.border-red-300]="
                  controlHasError('admissionDate', 'required')
                "
              />
              <div
                *ngIf="controlHasError('admissionDate', 'required')"
                class="text-sm text-red-600"
              >
                Please select admission date
              </div>
            </div>

            <!-- Selected Class Display -->
            <div
              *ngIf="getSelectedClass()"
              class="bg-blue-50 rounded-lg p-4 border border-blue-200 animate-fade-in"
            >
              <div class="flex items-center justify-between">
                <div>
                  <h4 class="font-medium text-blue-800 mb-1">Selected Class</h4>
                  <p class="text-blue-600 font-normal">
                    {{ getSelectedClass() }}
                  </p>
                </div>
                <div
                  class="bg-blue-500 text-white px-3 py-1 rounded-full text-sm font-normal"
                >
                  ✓ Confirmed
                </div>
              </div>
            </div>
          </div>

          <!-- Form Actions -->
          <div class="flex justify-between mt-8 pt-6 border-t border-slate-200">
            <button
              type="button"
              class="px-6 py-3 border border-slate-300 text-slate-700 font-medium rounded-lg hover:bg-slate-50 focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 transition-all duration-200"
              (click)="onReset()"
            >
              Reset Form
            </button>
            <button
              type="submit"
              class="px-8 py-3 bg-blue-600 text-white font-medium rounded-lg shadow-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
              [disabled]="!studentForm.valid"
            >
              Add Student
            </button>
          </div>
        </form>
      </div>
    </div>

    <!-- Form Preview (for development) -->
    <div
      class="mt-6 bg-white rounded-lg shadow-md border border-slate-200 p-4"
      *ngIf="studentForm.valid && !isLoadingDropdowns"
    >
      <h3 class="text-lg font-medium text-slate-800 mb-3">Form Preview</h3>
      <div class="bg-slate-50 rounded-lg p-4">
        <pre class="text-sm text-slate-600 font-mono">{{
          getFormValues() | json
        }}</pre>
      </div>
    </div>
  </div>
</div>
<hlm-toaster />

// students\student-form\student-form.spec.ts
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { StudentForm } from './student-form';

describe('StudentForm', () => {
  let component: StudentForm;
  let fixture: ComponentFixture<StudentForm>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [StudentForm]
    })
    .compileComponents();

    fixture = TestBed.createComponent(StudentForm);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

// students\student-form\student-form.ts
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import {
  FormBuilder,
  FormGroup,
  ReactiveFormsModule,
  Validators,
} from '@angular/forms';
import { HttpClient } from '@angular/common/http';
import { environment } from '../../../environments/environment.development';
import { CREATE_STUDENT, GET_ALL_DROPDOWNS } from '../../../utils/apiPaths';
import { toast } from 'ngx-sonner';
import { HlmToasterComponent } from '@spartan-ng/helm/sonner';

interface Student {
  id?: number;
  name: string;
  age: number;
  rollNo: number;
  grade: number;
  section: string;
  dob: string;
  gender: string;
  address: string;
  admissionDate: string;
  class: string;
}

interface GradeSection {
  _id: string;
  grade: number;
  section: string;
  displayText?: string;
}

@Component({
  selector: 'app-student-form',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule, HlmToasterComponent],
  templateUrl: './student-form.html',
  styleUrls: ['./student-form.css'],
})
export class StudentForm implements OnInit {
  studentForm: FormGroup;
  gradeSections: GradeSection[] = [];
  isLoadingDropdowns = false;

  constructor(private fb: FormBuilder, private readonly http: HttpClient) {
    this.studentForm = this.fb.group({
      name: ['', [Validators.required, Validators.minLength(2)]],
      age: ['', [Validators.required, Validators.min(5), Validators.max(20)]],
      rollNo: ['', [Validators.required, Validators.pattern(/^[0-9]+$/)]],
      dob: ['', Validators.required],
      gender: ['', Validators.required],
      address: ['', [Validators.required, Validators.minLength(5)]],
      admissionDate: ['', Validators.required],
      class: ['', Validators.required],
    });
  }

  ngOnInit() {
    this.getAllDropDowns();
  }

  getAllDropDowns() {
    this.isLoadingDropdowns = true;
    this.http
      .get<GradeSection[]>(`${environment.apiUrl}${GET_ALL_DROPDOWNS}`)
      .subscribe({
        next: (res) => {
          this.gradeSections = res.map((item) => ({
            ...item,
            displayText: `Grade ${item.grade} - Section ${item.section}`,
          }));
          this.isLoadingDropdowns = false;
        },
        error: (ex) => {
          console.error(ex);
          this.isLoadingDropdowns = false;
          toast.error('Failed to load grade and section data');
        },
      });
  }

  getSelectedClass(): string {
    const selectedClassId = this.studentForm.get('class')?.value;
    if (selectedClassId) {
      const selectedClass = this.gradeSections.find(
        (item) => item._id === selectedClassId
      );

      console.log(selectedClass);
      if (selectedClass) {
        return `Grade ${selectedClass.grade}, Section ${selectedClass.section}`;
      }
    }
    return '';
  }

  getFormValues(): any {
    if (this.studentForm.valid) {
      const formValue = this.studentForm.value;
      const selectedClass = this.gradeSections.find(
        (item) => item._id === formValue.class
      );

      return {
        ...formValue,
        grade: selectedClass?.grade,
        section: selectedClass?.section,
        class: formValue.class,
      };
    }
    return null;
  }

  controlHasError(controlName: string, errorType: string): boolean {
    const control = this.studentForm.get(controlName);
    return !!(control && control.touched && control.hasError(errorType));
  }

  onSubmit() {
    if (this.studentForm.valid) {
      const formValue = this.studentForm.value;
      const selectedClass = this.gradeSections.find(
        (item) => item._id === formValue.class
      );

      let studentData: Student = {
        name: formValue.name,
        age: Number(formValue.age),
        rollNo: Number(formValue.rollNo),
        dob: formValue.dob,
        gender: formValue.gender,
        address: formValue.address,
        admissionDate: formValue.admissionDate,
        grade: selectedClass?.grade || 0,
        section: selectedClass?.section || '',
        class: formValue.class,
      };

      this.http
        .post(`${environment.apiUrl}${CREATE_STUDENT}`, studentData)
        .subscribe({
          next: (data) => {
            if (data) {
              toast.success('Student added successfully');
              this.onReset();
            }
          },
          error: (err) => {
            if (Array.isArray(err.error.message)) {
              err.error.message.forEach((element: string) => {
                toast.error(element);
              });
            } else {
              toast.error(err.error.message);
            }
            console.log('Err is : ', err);
          },
        });
    } else {
      this.markFormGroupTouched();
    }
  }

  onReset() {
    this.studentForm.reset();
  }

  private markFormGroupTouched() {
    Object.keys(this.studentForm.controls).forEach((key) => {
      const control = this.studentForm.get(key);
      if (control) {
        control.markAsTouched();
      }
    });
  }
}
